https://www.w3schools.com/css/default.asp - учебник
https://demoqa.com/buttons - примеры контролов

https://wp-kama.ru/id_5875/30-css-selektorov.html#selectall

Консоль девтулс
элемент
$("")
$("[]")

массив элементов
$$("")



*				Все элементы.
:root				Корень документа.
#firstname				Элемент с id="firstname".
#news:target				Выберет элемент с id="news" когда к нему пришил по клику.
.intro				Все элементы с class="intro".
.name1 .name2				Все элементы с class="name2" у которых родитель с class="name1".
.name1.name2				Все элементы с class="name1 name2".
:not(p)				Все не <p> элементы.
[lang|=en]				Все элементы атрибут lang которых начинается с "en".
[target]				Все элементы с target="что-либо".
[target=_blank]				Все элементы с target="_blank".
[title~=flower]				Все элементы в атрибуте title которых есть слово "flower".
а[target]				Все атрибуты <a> c элементами target="что-либо".
a[href^="https"]				Каждый <a> атрибут href которого начинается с "https".
a[href$=".pdf"]				Каждый <a> атрибут href которого заканчивается ".pdf".
a[href*="w3schools"]				Каждый <a> атрибут href которого содержит подстроку "w3schools".
				
p				Все <p> элементы.
p.intro				Все <p> элементы с class="intro".
div + p				<p> который находятся сразу после <div>.
div ~ p				Все <p> которые находятся после <div>.
div > p				Все <p> ПРЯМОЙ родитель которых <div>.
div p				Все <p> внутри всех <div>.(можно сочетать с идентификаторами и классами: body.opera a)
div, p				Все <div> и все <p> элементы.
				
div:not(:only-child)				Все <div> внутри которых больше одного элемента.
p:first-child				Первый элемент в списке родительского элемента.
p:first-of-type				Первый <p> элемент в списке родительского элемента.
p:nth-child(2)				Второй элемент в списке родительского элемента.
p:nth-last-child(2)				Второй элемент в списке родительского элемента (счет идет с конца).
p:nth-last-of-type(2)				Второй <p> в списке родительского элемента (счет идет с конца).
p:nth-of-type(2)				Второй <p> в списке родительского элемента.
p:last-child				Последний элемент в списке родительского элемента.
p:last-of-type				Последний <p> в списке родительского элемента.
p:only-child				Единственный <p> у родителя (других элементов быть не может).
p:only-of-type				Один <p> у родителя (другие элементы могут быть).
p::first-letter				Первая буква каждого <p> элемента.
p::first-line				Первая линия каждого <p> элемента.
p::after				Вставляет псевод-элемент в начале каждого <p> элемента.
p::before				Вставляет псевод-элемент в конце каждого <p> элемента.
p:lang(it)				Все <p> с lang="it".
p:empty				Все пустые <p>, в которых нет пробелов, текста или других элементов.
				
input:checked				Все выбранные <input type="checkbox"> элементы.
input:default				Все <input> элементы.
input:disabled				Все <input disabled> элементы.
input:enabled				Все активные (не disabled) элементы <input>.
input:focus				<input> в котором находится курсор.
input:indeterminate				Все <input> в статусе indeterminate.
input:in-range				Все <input> со значением в пределах указанного в min/max диапазона.
input:invalid				Все <input> с недопустимым значением.
input:optional				Все <input> у которых нет артибута "required".
input:out-of-range				Все <input> со значением за пределами указанного в min/max диапазона.
input:out-of-range				Все <input> со значением выходящим за указанный рэндж.
input:read-only				Все <input> у которых указан атрибут "readonly".
input:read-write				Все <input> у которых не указан атрибут "readonly".
input:required				Все <input> у которых указан атрибут "required".
input:valid				Все <input> с валидным значением.
				
a:active				Активная ссылка.
a:focus-visible				Фокус сработает, только если на кнопку перешли с клавиатуры через TAB.
a:hover				Сслыка на которую наведена мышка.
a:link				Все непосещенные ссылки.
a:visited				Все посещенные ссылки.

::selection				Выберет текущее выделение текста мышкой.
:is(.foo, .bar) a				Тоже что и .foo a, .bar a. Удобен для записи больших селекторов компактно.
:where(.foo, .bar) a				Тоже что и .foo a, .bar a, но вес селектора в скобках не учитывается.

div:focus-within				Сработает на блоке, когда его внутренний элемент находится в фокусе.
input::placeholder				Все <input> у которых указан атрибут "placeholder".






Группировка
.selector1, code, #id
Перечисления через запятую.

.heading span,.block,.wrapper
Для всех <span> внутри класса .heading (на любом уровне вложенности);
для всех элементов с классом .block;
для всех элементов с классом .wrapper.

Объединение
.selector.selector_modificator
Этот приём применим только для классов и атрибутов, потому что только их может быть больше одного. 
Селекторы записываются слитно. 

Потомки
article h3
Селекторы записываются последовательно через пробел.


псевдокласс, пример :first-child
псевдоэлемент, пример  ::first-line




Примеры
$("")
$("[]")
$("[type=button].header-search-button")

$("#query-builder-test")
$("div[data-testid=results-list]")

$$(".Popover .Popover-message")


body > div.logged-out.env-production.page-responsive > div.application-main > main > react-app > div > div > div.Box-sc-g0xbh4-0.emundt > div > div > div.Box-sc-g0xbh4-0.kKUpQe > div.Box-sc-g0xbh4-0.hlUAHL > div > div.Box-sc-g0xbh4-0.gytyqX > div.Box-sc-g0xbh4-0.kzrAHr > div > div > div:nth-child(1) > div > div.Box-sc-g0xbh4-0.jUbAHB > h3 > div > div.Box-sc-g0xbh4-0.bBwPjs.search-title


<input id="something_stuff_013_work" />
<input id="something_stuff_016_work" />

input[id^='something_stuff_'][id$='_work']


Lesson 07 CssXpathExamples
https://devhints.io/xpath





        Configuration.baseUrl = "https://the-internet.herokuapp.com";
        open("basic_auth"); // for CI/CD -Dselenide.baseUrl=https://the-internet.herokuapp.com
        open("/basic_auth", AuthenticationType.BASIC, new BasicAuthCredentials("", "user", "password"));
        open("/basic_auth/", AuthenticationType.BASIC, new BasicAuthCredentials("user", "password"));
        back();
        refresh();
        clearBrowserCookies();
        clearBrowserLocalStorage();
        executeJavaScript("sessionStorage.clear();");
        confirm(); // OK in alert dialog
        dismiss(); // Cancel in alert dialog
        closeWindow(); //close active tab
        closeWebDriver(); // close browser completely
        switchTo().frame("new"); //перейти во фрэйм на странице
        switchTo().defaultContent(); //выйти из фрейма в DOM.
        switchTo().window("name"); // переключение между вкладками
        var cookie = new Cookie("foo", "bar");
        WebDriverRunner.getWebDriver().manage().addCookie(cookie); // устновить куки }
        $("div").click();
        element("div").click(); //эквивалентно, для котлина
        $("div", 3).click(); //кликнуть 3-ий div
        $x("//h1/div").click();
        $("div").$x(".//h1").click(); //? перепроверить
        $(byXpath("//h1/div")).click();
        $(byText("text on the page")).click(); // элемент с отображаемым текстом
        $(withText("ext on the pag")).click(); // элемент с подстрокой
        $(byTagAndText("div", "text on the page")).click(); // текст в тэге div
        $(withTagAndText("div", "ext on the pag")).click(); // подстрока в тэге div
        $("div").parent().click(); // подняться на уровень вверх
        $("div").sibling(1).click(); // второй сосед ниже
        $("div").preceding(1).click(); // второй сосед выше
        $("div").closest("h3"); // найти ближайший предок h3
        $("div").ancestor("h3"); // тоже самое // найти ближайший предок h3
        $("div:last-child"); //поиск с учетом псевдоэлеменов, работают не все
        $("div").$("h1").find(byText("abc")).click(); //найти div, потом h1, потом элменет с текстом и кликнуть.
        $(byAttribute("name", "val")).click();
        $("[name=val]").click(); // эквивалентно
        $(byId("idName")).click();
        $("#idName").click(); // эквивалентно
        $(byClassName("className")).click();
        $(".className").click(); // эквивалентно }
        $("div").click();
        $("div").doubleClick();
        $("div").contextClick(); // правая кнопка мыши
        $("div").hover();
        $("div").setValue("text"); // все сотрет и напешет заново
        $("div").append("text"); // добавит в конец
        $("div").clear(); // не всегда работает
        $("div").setValue(""); // эквивалентно
        $("div").sendKeys("c"); // нажатие клавиши на элементе
        actions().sendKeys("c").perform(); // нажатие клавиши без привязки к элементу
        actions().sendKeys(Keys.chord(Keys.CONTROL, "f")); // комбинация клавиш ctrl+f
        $("html").sendKeys(Keys.chord(Keys.CONTROL, "f")); // эквивалентно
        $("").pressEnter();
        $("").pressEscape();
        $("").pressTab();
        actions().moveToElement($("div")).clickAndHold().moveByOffset(300, 200).release().perform(); // драгэнддроп
        $("select").selectOption("text_name"); // классический дроп дауны
        $("select").selectOptionByValue("val");
        $("").selectRadio("radio)optins"); // классические радиокнопки
        $("").shouldBe(visible);
        $("").shouldNotBe(visible);
        $("").shouldHave(text("abs"));
        $("").shouldNotHave(text("abc"));
        $("").should(appear);
        $("").shouldNot(appear);
        $("").shouldBe(visible, Duration.ofSeconds(30)); // определить тайм аут для ожидания отображения конкретного элемента
        $("").shouldBe(visible);
        $("").shouldBe(hidden);
        $("").shouldHave(text("abc")); // поиск по части
        $("").shouldHave(exactText("abc")); // точное совпадение
        $("").shouldHave(textCaseSensitive("abc")); // с учетом регистра
        $("").shouldHave(exactTextCaseSensitive("abc")); // с учетом регистра
        $("").should(matchText("[0-9]abc$")); //regexp регулярные выражения
        $("").shouldHave(cssClass("class-name-1"), cssClass("class-name-2")); // элемент с двумя классами
        $("").shouldHave(cssValue("color", "red")); // css свойства элемента
        $("").shouldHave(value("inputTest")); // проверка введенного текста
        $("").shouldHave(exactValue("inputTest")); // точное совпадение
        $("").shouldBe(empty); // проверка что поле пустое
        $("").shouldHave(attribute("disabled")); //??? существует атрибюут
        $("").shouldHave(attribute("name", "value")); // проверка что у такого атрибута такое значение
        $("").shouldHave(attributeMatching("name", "[0-9]abc$")); // использование regExp
        $("").shouldBe(checked); // чекбокс выбран
        $("").shouldNotBe(checked); // чекбокс НЕ выбран
        $("").should(exist); // элемент существует в ДОМ модели, может быть невидимым
        $("").shouldBe(disabled); // для кнопок, проверка на дисэйблед, работа зависит от реализации.
        $("").shouldBe(enabled); // для кнопок
        $$("div"); // ничего не делает, нужно лействие, просто выберет все дивы
        $$x("//div"); // тоже самое только для xpath
        $$("div").filterBy(text("123")).shouldHave(size(1)); // поиск в коллекции элементов с текстом 123 сайз 1
        $$("div").excludeWith(text("123")).shouldHave(size(1)); // исключение из коллекции элементов соответствующих 123 сайз 1
        $$("div").first().click(); // первый див в коллекции
        elements("div").first().click(); // аналог $$
        $$("div").last().click(); // последний див в коллекции
        $$("div").get(1).click(); // второй див в коллекции
        $("div", 1).click(); // второй найденный див
        $$("div").findBy(text("123")).click(); // findBy уточняет поиск и берет первый элемент
        $$("div").shouldHave(size(0)); // количество найденных дивов = 0
        $$("div").shouldBe(CollectionCondition.empty); // эквивалентно
        $$("div").shouldHave(texts("AA", "BB", "CC")); // в коллекции должны быть только AA BB CC, если будет и DD будет ошибка.
        $$("div").shouldHave(exactTexts("AA", "BB", "CC")); // эквивалентно, но точное совпадение текста
        $$("div").shouldHave(textsInAnyOrder("BB", "AA", "CC")); // эквивалентно texts(), без учета порядка значений
        $$("div").shouldHave(exactTextsCaseSensitiveInAnyOrder("BB", "AA", "CC")); // эквивалентно, с учетом регистра
        $$("div").shouldHave(itemWithText("text")); // найти в коллекции элемент с текстом text
        $$("div").shouldHave(sizeGreaterThan(0)); // количество элементов больше 0
        $$("div").shouldHave(sizeGreaterThanOrEqual(1)); // количество элементов больше либо равно 1
        $$("div").shouldHave(sizeLessThan(2)); // количество элементов меньше 2
        $$("div").shouldHave(sizeLessThanOrEqual(3)); // количество элементов меньше или равно 3
        File file1 = $("a.fileLink").download(); // скачивание из простых линков
        File file2 = $("div").download(DownloadOptions.using(FileDownloadMode.FOLDER));
        File file = new File("src/test/resources/readme.txt");
        $("#file-upload").uploadFile(file);
        $("#file-upload").uploadFromClasspath("readme.txt");
        $("uploadButton").click(); // не забыть нажать
        executeJavaScript("alert('selenide')");
        executeJavaScript("alert(argument[0]+argument[1])", "abc", 12);
        long fortytwo = executeJavaScript( "return argument[0]*argument[1];", 6,7);