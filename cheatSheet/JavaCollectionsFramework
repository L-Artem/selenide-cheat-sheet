является частью JDK
2 интерфейса: Collection и Map
по типу хранения данных:
простые последовательные наборы элементов
и наборы пар «ключ — значение» (словари).

interface Colletion<E>
||
interface Set<E> extends Collection<E>
interface List<E> extends Collection<E>
interface Queue<E> extends Collection<E>

Collection — определяет основные методы работы с простыми наборами элементов


interface Map<K, V>

Map - предоставляет базовые методы для работы с данными вида «ключ — значение».
||
Hashtable - является синхронизированной, реализация структуры данных, хэш-таблица. Не позволяет использовать null в качестве значения или ключа.
||
HashMap — не синхронизирована, позволяет использовать null в качестве ключа или значения. не упорядоченная, порядок хранения элементов зависит от хэш-функции.
Добавление элемента выполняется за константное время O(1), удаление, получение зависит от распределения хэш-функции. Может быть линейным O(n).
||
LinkedHashMap — упорядоченная реализация хэш-таблицы, двунаправленные связи между элементами (аналогично LinkedList).
||
TreeMap — реализация основанная на красно-чёрных деревьях. Является упорядоченной. Сортируется по ключам с использованием принципа "natural ordering",
может быть настроено под конкретную задачу при помощи объекта Comparator, который указывается в качестве параметра при создании объекта TreeMap.
||
WeakHashMap — реализация хэш-таблицы, организованная с использованием weak references. Garbage Collector автоматически удалит элемент из коллекции при следующей сборке мусора,
если на ключ этого элеметна нет жёстких ссылок.


Интерфейс List - упорядоченные коллекции. предоставляется возможность доступа к элементам коллекции по индексу и по значению
(позволяют хранить дубликаты, результатом поиска по значению будет первое найденное вхождение)
||
Vector — реализация динамического массива объектов. Позволяет хранить любые данные, включая null в качестве элемента.
не рекомендуется использовать, если не требуется достижения потокобезопасности, все операции с данными являются синхронизированными.
В качестве альтернативы применяется аналог — ArrayList.
||
Stack — данная коллекция является расширением коллекции Vector, частично синхронизированная
||
ArrayList — реализация динамического массива объектов. Позволяет хранить любые данные, включая null в качестве элемента.
следует применять, если в процессе работы с коллекцией предполагается частое обращение к элементам по индексу.
Из-за особенностей реализации поиндексное обращение к элементам выполняется за константное время O(1).
Коллекцию рекомендуется избегать, если требуется частое удаление/добавление элементов в середину коллекции.
||
LinkedList — Позволяет хранить любые данные, включая null. В основе лежит двунаправленный связный список (каждый элемент имеет ссылку на предыдущий и следующий).
Добавление и удаление из середины, доступ по индексу, значению происходит за линейное время O(n), из начала и конца за константное O(1).
Коллекцию можно использовать как стек или очередь, реализованы соответствующие методы.


Интерфейс Set - неупорядоченная коллекция, не может содержать дублирующиеся данные.
||





